#!/usr/bin/env python
"""
Copyright (C) 2014 Jakub Krajniak <jkrajniak@gmail.com>

This file is part of BondMatcher.

BondMatcher is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


Find the subneetworks of the polymer network.
"""


import argparse
from collections import deque
import sys

from src import files_io


parser = argparse.ArgumentParser(description='Searching for subnetworks of the polymer network.')

parser.add_argument('-f', '--pdb', help='The path to the pdb file to read.', required=True)
parser.add_argument('-t', '--top', help='The path to the original topology file', required=True)
parser.add_argument('-o', '--output', help='The output pdb file', required=True)
parser.add_argument('-c', '--config', help='The .par config file', required=True)
parser.add_argument('-st', '--stat_file', help='The output stat file')

args = parser.parse_args()

file_path = files_io.prepare_path(args.output)
output = open(file_path, 'w')

if args.pdb.endswith('pdb'):
  pdb_file = files_io.PDBFile(args.pdb)
else:
  raise ValueError('Unrecognized file type, supported: .pdb')

if args.stat_file:
  stat_file_path = files_io.prepare_path(args.stat_file)
  stat_file = open(stat_file_path, 'w')
else:
  stat_file = sys.stdout

print 'PDB file: %s\nTOP file: %s\nConfig file: %s\nOutput file: %s' % (
    args.pdb, args.top, args.config, args.output
    )

# Reads the config.
execfile(args.config)

top_file = files_io.TopologyFile(args.top)

pdb_file.open()
top_file.open()

pdb_file.read()
top_file.read()

chain_bonds = {}
for b in CHAIN_BONDS:
  chain_bonds[b[0]] = b[1]
  chain_bonds[b[1]] = b[0]

# Get the atom_ids per chains.
chain_sets = deque()
for bond in top_file.data['bonds']:
  ai_at = pdb_file.data[bond[0]]
  aj_at = pdb_file.data[bond[1]]
  
  ai_key = (ai_at.name, ai_at.chain_name)
  aj_key = (aj_at.name, aj_at.chain_name)

  # Check if the bond is needed for us, depend what is in the config file.
  # If there is bond between chain EPO1 and DET2 then the chain_sets will be
  # extended by the set that will contain two tuples: (EPO, 1), (DET, 2) that meens
  # that there is a bond between those two chains.
  if chain_bonds.get(ai_key) == aj_key or chain_bonds.get(aj_key) == ai_key:
    chain_sets.append(set([
      (ai_at.chain_name, ai_at.chain_idx),
      (aj_at.chain_name, aj_at.chain_idx)
      ]))

# Merge the sets. Each of the sets contains a tuples with the chain_name, chain_id
# if two sets has in common the same chain_name, chain_id that meens those two
# sets of chains are linked together. 
rem_idx = set()  # Mark which idx should be removed
for idx in xrange(len(chain_sets)):
  set_a = chain_sets[idx]
  for x in xrange(idx, len(chain_sets), 1):
    if x != idx:
      set_b = chain_sets[x]
      if (set_a & set_b):
        set_b.update(set_a)
        rem_idx.add(idx)

chain_sets = [x for idx, x in enumerate(chain_sets) if idx not in rem_idx]

print 'Stats'
print 'Number of joined chains: %d' % len(chain_sets)
chain_lengths = [len(x) for x in chain_sets]
stat_file.write('chain_length; occurence\n')
for cl in sorted(set(chain_lengths)):
  stat_file.write('%d;%d\n' % (cl, chain_lengths.count(cl)))
stat_file.close()

# Prepare chains to replace the name
replace_chain_names = {}  # old: new
for new_idx, chains in enumerate(chain_sets):
  for ch in chains:
    if ch in replace_chain_names:
      raise ValueError('xxx!')
    replace_chain_names[ch] = (NEW_CHAIN_FORMAT % new_idx, ch[1])

# This is a helper function for storing the pdb file
def get_line_atoms_filter(replace_chain_names):
  def line_atoms_top(line):
    tmp = filter(None, line.split(' '))
    try:
      chain_key = (tmp[3], tmp[4])
      new_name = replace_chain_names[chain_key]
      line = line.replace('\n', '')
      nel = '%s%4s%5s%s\n' % (
        line[0:17],
        new_name[0],
        new_name[1],
        line[26:]
        )
      return nel
    except Exception as ex:
      return line
  
  return line_atoms_top

pdb_file.write(output, {'ATOM': get_line_atoms_filter(replace_chain_names)})
output.close()
